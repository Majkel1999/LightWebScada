@page "/reports/create/{organizationId:int}"
@using Newtonsoft.Json
@using System.Text

@inject IJSRuntime JS

@attribute [Authorize]

<EditForm Model="@Element" OnValidSubmit="AddToList">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>
            <b>Client Id</b>
            <InputNumber @bind-Value="Element.ClientID" />
        </label>
        <label>
            <b>Register Type</b>
            <InputSelect @bind-Value="Element.Type">
                @foreach (var value in Enum.GetValues(typeof(RegisterType)))
                {
                    <option>@value</option>
                }
            </InputSelect>
        </label>
        <label>
            <b>Register address</b>
            <InputNumber @bind-Value="Element.Address">0</InputNumber>
        </label>
        <button class="btn btn-primary" type="submit">Add to report</button>
    </div>
</EditForm>

<br />

<button class="btn btn-primary" @onclick="@(() => GenerateReportAsync())">Generate Report</button>

<br />

@foreach (ReportElement element in Report.Content)
{
    @("ID" + element.ClientID +" On Adress " + element.Address+" Type: " + element.Type) <br />
}

@code {
    [Parameter]
    public int organizationId { get; set; }

    private ReportContent Report = new ReportContent();
    private ReportElement Element = new ReportElement();

    private void AddToList()
    {
        if (!Report.Content.Any(x => x.Address == Element.Address && x.Type == Element.Type && x.ClientID == Element.ClientID))
        {
            Report.Content.Add(Element);
            Element = new ReportElement();
        }
    }

    private void GenerateReportAsync()
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post,
        "http://maluch.mikr.us:30104/report?OrganizationId=" + organizationId);
        JS.InvokeVoidAsync("getReport", organizationId, JsonConvert.SerializeObject(Report));
    }
}
@page "/views/create/{OrganizationId:int}"

@using Microsoft.Extensions.Primitives
@using Newtonsoft.Json
@using Pages.Modals

@inject OrganizationContext organizationContext
@inject NavigationManager NavManager

<div class="container" style="max-width:500px">
    <div class="text-center font-weight-bolder" style="font-size:32px"></div>
    <div class="border" style="padding:20px">
        <b>
            <div class="center-text">View name</div>
        </b>
        <EditForm Model="@m_view">
            <div class="form-group">
                <label for="organization name"><b></b></label>
                <InputText id="username" @bind-Value="m_view.Name" class="form-control" required
                    placeholder="View name" />
            </div>
        </EditForm>
    </div>
</div>

<div class="container-fluid">
    <div class="row">

        <div class="col-4">
            <div class="center-border">
                @foreach (ViewType type in (ViewType[])Enum.GetValues(typeof(ViewType)))
                {
                    <div class="row">
                        <button class="btn btn-primary" @onclick="() => AddElement(type)"
                        style="margin:auto;margin-top:10px">
                            Add @type.ToString()
                        </button>
                    </div>
                }
            </div>
            <div class="row">
                <div class="center-text col-6" style="margin-top:10px">
                    <button class="btn btn-success" @onclick="() => SaveViewConfiguration()">Save</button>
                </div>
                @if (m_isEdit)
                {
                    <div class="center-text col-6" style="margin-top:10px">
                        <button class="btn btn-danger" @onclick="() => DeleteViewConfiguration()">Delete</button>
                    </div>
                }
            </div>

            <div class="row center-border delete-zone">
                <Dropzone Items="m_elements" Class="plk-static-zone" InstantReplace="true" TItem="ViewElement"
                    OnItemDrop="@((x) => RemoveObject(x))" />
            </div>
        </div>

        <div class="col-8">
            <div class="center-border">
                @foreach (var row in m_view.Rows)
                {
                    <div class="plk-flex center-border">
                        <Dropzone Class="flex-container" Items="row.Elements" MaxItems="3" InstantReplace="true">
                            <div class="draggable-item" @onclick="() => ShowModal(context)">
                                <div>
                                    <div class="center-text" style="font-size:large;padding-top:15px">
                                        <b>@context.ViewType.ToString()</b>
                                    </div>
                                    <hr class="container-line side-margin">
                                    <div class="side-margin" style="text-align:center">
                                        @context.RegisterType.ToString()
                                    </div>
                                    <br />
                                    <div class="side-margin" style="text-align:center">
                                        @context.RegisterAddress.ToString()
                                    </div>
                                </div>
                            </div>
                        </Dropzone>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int OrganizationId { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private View m_view = new View();
    private ViewObject m_viewObject;
    private List<ViewElement> m_elements = new List<ViewElement>();
    private bool m_isEdit = false;
    private int m_viewId = -1;

    protected override void OnParametersSet()
    {
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(NavManager.Uri).Query);
        if (query.TryGetValue("ViewId", out StringValues viewId))
        {
            m_viewId = int.Parse(viewId.First());
            m_viewObject = organizationContext.Views
            .Where(x => x.Id == m_viewId)
            .FirstOrDefault();
            m_view = JsonConvert.DeserializeObject<View>(m_viewObject.ViewJson) ?? new View();
            m_isEdit = true;
        }
    }

    private void AddElement(ViewType type)
    {
        m_view.AddToFirstOpen(new ViewElement(type));
    }

    private void SaveViewConfiguration()
    {
        if (m_view.RowsCount == 0 || string.IsNullOrEmpty(m_view.Name))
            return;
        if (m_isEdit)
        {
            m_viewObject.ViewJson = JsonConvert.SerializeObject(m_view);
            m_viewObject.Name = m_view.Name;
        }
        else
        {
            string json = JsonConvert.SerializeObject(m_view);
            organizationContext.Views.Add(new ViewObject
            {
                OrganizationId = this.OrganizationId,
                ViewJson = json,
                Name = m_view.Name
            });
        }
        organizationContext.SaveChanges();
        NavManager.NavigateTo("/organizations/" + this.OrganizationId, true);
    }

    private void DeleteViewConfiguration()
    {
        ViewObject view = organizationContext.Views.Where(x => x.Id == m_viewId).First();
        Console.WriteLine(view.Name);
        if (view != null)
        {
            organizationContext.Views.Remove(view);
            organizationContext.SaveChanges();
            NavManager.NavigateTo("/organizations/" + this.OrganizationId, true);
        }
    }

    private async void ShowModal(ViewElement element)
    {
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            FocusFirstElement = true
        };
        ModalParameters parameters = new ModalParameters();
        parameters.Add("Element", element);
        var modal = Modal.Show<ViewElementModal>(element.ViewType.ToString(), parameters, options);
        var result = await modal.Result;
        if (!result.Cancelled)
            StateHasChanged();
    }

    private void RemoveObject(ViewElement element)
    {
        m_view.Remove(element);
    }
}
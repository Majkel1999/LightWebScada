@page "/organizations/create"

@inject OrganizationContext organizationContext
@inject NavigationManager Navigation
@inject ApiKeyGenerator apiKeyGenerator
@inject AuthenticationStateProvider AuthState
@inject DatasetContext datasetContext


@attribute [Authorize]

<div class="container" style="max-width:500px">
    <div class="text-center font-weight-bolder" style="font-size:32px">Create new organization</div>

    <div class="border" style="padding:20px">
        @if (!String.IsNullOrEmpty(m_errorString))
        {
            <div class="alert alert-danger" role="alert">
                @m_errorString
            </div>
        }
        <EditForm Model="@m_organizationRegistrationModel" OnValidSubmit="@TryCreateOrganization">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="organization name"><b>Organization Name</b></label>
                <InputText id="username" @bind-Value="m_organizationRegistrationModel.OrganizationName"
                    class="form-control" required placeholder="Organization name" />
            </div>

            <button class="btn btn-primary" type="submit">➕ Create organization</button>
            <a class="btn btn-danger" type="button" href="/">Cancel</a>
        </EditForm>
    </div>
</div>

@code {
    private OrganizationRegistrationModel m_organizationRegistrationModel = new OrganizationRegistrationModel();
    private string m_errorString = "";

    private async void TryCreateOrganization()
    {
        if (organizationContext.Organizations.Where(x => x.Name == m_organizationRegistrationModel.OrganizationName).Any())
        {
            m_errorString = "Organization with the same name already exists! Please pick another one";
            return;
        }
        var user = (await AuthState.GetAuthenticationStateAsync()).User;
        var organization = new Organization
        {
            Name = m_organizationRegistrationModel.OrganizationName,
            ApiKey = apiKeyGenerator.GenerateNewApiKey(),
            Owner = user.Identity.Name
        };
        organizationContext.Organizations.Add(organization);
        organizationContext.Members.Add(new OrganizationMember
        {
            Organization = organization,
            OrganizationId = organization.OrganizationId,
            isAdmin = true,
            UserName = user.Identity.Name
        });
        await organizationContext.SaveChangesAsync();
        datasetContext.CreateNewTable(organization);
        Navigation.NavigateTo("/organizations/" + organization.OrganizationId, true);
    }
}

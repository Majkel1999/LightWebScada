@page "/organizations/manage/{organizationId:int}"

@inject NavigationManager NavManager
@inject OrganizationContext OrganizationContext
@inject AuthenticationStateProvider authState
@inject DatasetContext datasetContext
@inject IStringLocalizer<SharedResources> localizer

@attribute [Authorize]

<h3 class="text-center">@localizer["ManageOrg"] - @m_organizationName </h3>

<div class="container" style="max-width:500px">
    <div class="border" style="padding: 20px; margin: 10px">
        <h4 class="text-center">@localizer["Informations"]</h4>
        <EditForm Model="@m_organizationRegistration" OnSubmit="ChangeOrganizationName">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="organization name"><b>@localizer["OrgName"] </b></label>
                <InputText id="username" @bind-Value="m_organizationRegistration.OrganizationName" class="form-control"
                           required placeholder=@localizer["OrgName"]  />
            </div>
            @m_nameChangeError
            <button class="btn btn-primary" type="submit">@localizer["ChangeName"] </button>

        </EditForm>

    </div>
</div>
<br />

<div class="container" style="max-width:500px">
    <div class="border overflow-auto" style="padding:20px;margin:10px">
        <h4 class="text-center">@localizer["DeleteOrg"] </h4>
        <div class="text-center">
            <button type="button" class="btn btn-danger" @onclick="() => DeleteOrganization()">
                ❗ 🗙 @localizer["DeleteOrg"] ❗
            </button>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int OrganizationId { get; set; }

    private OrganizationRegistrationModel m_organizationRegistration = new OrganizationRegistrationModel();
    private string m_organizationName;
    private string m_nameChangeError;

    protected override Task OnInitializedAsync()
    {
        InitParams();
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        InitParams();
        return base.OnParametersSetAsync();
    }

    private void InitParams()
    {
        m_organizationName = OrganizationContext.Organizations
        .Where(x => x.OrganizationId == OrganizationId)
        .Select(x => x.Name)
        .FirstOrDefault();
        m_organizationRegistration.OrganizationName = m_organizationName;
    }

    private void ChangeOrganizationName()
    {
        if (m_organizationRegistration.OrganizationName.Trim() == m_organizationName.Trim())
            m_nameChangeError = "Nazwa jest taka sama!";
        else if (OrganizationContext.Organizations.Any(x => x.Name == m_organizationRegistration.OrganizationName.Trim()))
            m_nameChangeError = "Inna organizacja ma już taką samą nazwe!";
        else
        {
            OrganizationContext.Organizations
            .Where(x => x.OrganizationId == OrganizationId)
            .FirstOrDefault().Name = m_organizationRegistration.OrganizationName.Trim();
            OrganizationContext.SaveChanges();
            OnInitializedAsync().Wait();
            m_nameChangeError = String.Empty;
        }
    }

    private void DeleteOrganization()
    {
        var organization = OrganizationContext.Organizations.Where(x => x.OrganizationId == OrganizationId).FirstOrDefault();
        datasetContext.RemoveTable(organization);
        OrganizationContext.Organizations.Remove(organization);
        OrganizationContext.Configurations
            .Where(x => x.OrganizationId == OrganizationId)
            .ToList()
            .ForEach((y) => OrganizationContext.Configurations.Remove(y));
        OrganizationContext.SaveChanges();
        NavManager.NavigateTo("/", true);
    }
}

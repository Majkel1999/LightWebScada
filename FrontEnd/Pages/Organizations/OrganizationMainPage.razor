@page "/organizations/{organizationId:int}"

@inject OrganizationContext organizationContext
@inject ViewContext viewContext
@inject ApiKeyGenerator apiKeyGenerator
@inject IStringLocalizer<SharedResources> localizer

@attribute [Authorize]

<h2 class="text-center">@m_organizationName</h2>

<div class="container overflow-auto" style="max-width:700px">
    <div class="border" style="padding: 20px; margin: 10px">
        <div class="d-flex justify-content-between">
            <h4>@localizer["Views"]</h4>
            <a href=@String.Concat("/views/create/",organizationId) class="btn-link">➕ @localizer["AddView"]</a>
        </div>
        <table class="table text-center">
            <tbody>
                @foreach (ViewObject view in m_views)
                {
                    <tr>
                        <td class="text-center">@view.Name</td>
                        <td> <a class="oi oi-eye" href=@String.Concat("/views/show/",view.Id)>@String.Concat(" ",localizer["View"])</a></td>
                        <td>
                            <a class="oi oi-share-boxed"
                            href=@String.Concat("/views/create/",organizationId,"?ViewId=",view.Id)>
                                @String.Concat(" ",@localizer["Edit"])</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="container overflow-auto" style="max-width:700px">
    <div class="border" style="padding: 20px; margin: 10px">
        <div class="d-flex justify-content-between">
            <h4>@localizer["Administrators"]</h4>
            <a href=@String.Concat("/organizations/users/add/",organizationId) class="btn-link">
                ➕ @localizer["AddUsers"]
            </a>
        </div>
        <table class="table text-center">
            <tbody>
                @foreach (string user in m_members.Where(x => x.isAdmin).Select(x => x.UserName))
                {
                    <tr>
                        <td>@user</td>
                    </tr>
                }
            </tbody>
        </table>
        <hr />
        <div class="d-flex justify-content-between">
            <h4>@localizer["Users"]</h4>
        </div>
        <table class="table text-center">
            <tbody>
                @foreach (string user in m_members.Where(x => !x.isAdmin).Select(x => x.UserName))
                {
                    <tr>
                        <td>@user</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="container" style="max-width:700px">
    <div class="border overflow-auto" style="padding:20px;margin:10px">
        <div class="d-flex justify-content-between">
            <h4>@localizer["Configurations"]</h4>
            <a href=@String.Concat("/configurations/create/",organizationId) class="btn-link">➕
                @localizer["AddConfiguration"]</a>
        </div>
        <hr />
        <div class="text-center">
            @localizer["APIKey"]: @m_apiKey
        </div>
        <table class="table text-center">
            <tbody>
                @foreach (ClientConfigEntity config in m_organizationConfigs)
                {
                    <tr>
                        <td class="text-center">@config.ConfigName</td>
                        <td>
                            <a class="oi oi-share-boxed"
                            href=@String.Concat("/configurations/edit/",config.ID)>@String.Concat(" ",@localizer["Edit"])</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="text-center">
    <button class="btn btn-primary"
        href=@String.Concat("/organizations/manage/",organizationId)>@localizer["AdvancedSettings"]</button>
</div>

@code {
    [Parameter]
    public int organizationId { get; set; }

    private List<ClientConfigEntity> m_organizationConfigs;
    private List<OrganizationMember> m_members;
    private List<ViewObject> m_views;
    private string m_organizationName;
    private string m_apiKey;

    protected override Task OnInitializedAsync()
    {
        InitParams();
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        InitParams();
        return base.OnParametersSetAsync();
    }

    private void InitParams()
    {
        m_views = viewContext.Views
        .Where(x => x.OrganizationId == organizationId)
        .ToList();
        m_organizationName = organizationContext.Organizations
        .Where(x => x.OrganizationId == organizationId)
        .Select(x => x.Name)
        .FirstOrDefault();
        m_organizationConfigs = organizationContext.Configurations
        .Where(x => x.OrganizationId == organizationId)
        .ToList();
        m_members = organizationContext.Members
        .Where(x => x.OrganizationId == organizationId)
        .ToList();
        m_apiKey = organizationContext.Organizations
        .Where(x => x.OrganizationId == organizationId)
        .Select(x => x.ApiKey)
        .FirstOrDefault();
        if (String.IsNullOrEmpty(m_apiKey))
        {
            m_apiKey = apiKeyGenerator.GenerateNewApiKey();
            var organization = organizationContext.Organizations
            .Where(x => x.OrganizationId == organizationId)
            .FirstOrDefault();
            organization.ApiKey = m_apiKey;
            organizationContext.SaveChanges();
        }
    }
}
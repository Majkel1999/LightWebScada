@page "/configurations/edit/{organizationId:int}"
@using Microsoft.Extensions.Primitives

@inject OrganizationContext organizationContext
@inject ConfigHandler configHandler
@inject NavigationManager NavManager

<AuthorizeView Context="authContext" Policy=@Policies.EditConfigurationsPolicy Resource="@OrganizationId">
    <Authorized>
        <div class="container" style="max-width:500px">
            <div class="border" style="padding: 20px; margin: 10px">
                @if (!String.IsNullOrEmpty(m_registerError))
                {
                    <br />
                    <div class="alert alert-danger" role="alert">
                        @m_registerError
                    </div>
                    <br />
                }
                <EditForm Model="m_valueModel" OnSubmit="AddToConfig">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="organization name"><b>Register Type</b></label>
                        <InputSelect id="type" @bind-Value="m_valueModel.Type" class="form-control" required>
                            @foreach (var value in Enum.GetValues(typeof(RegisterType)))
                            {
                                <option>@value</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="organization name"><b>Register adress 0-9999</b></label>
                        <InputNumber id="registerNumber" @bind-Value="m_valueModel.RegisterNumber" class="form-control"
                            required placeholder="Register address" />
                    </div>
                    <div class="text-center">
                        <button class="btn btn-primary" type="submit">Add register</button>
                    </div>
                </EditForm>
            </div>
        </div>


        <div class="container overflow-auto border" style="max-height:800px; padding:20px">
            <h4 class="text-center">Configuration</h4>
            @if (!String.IsNullOrEmpty(m_configError))
            {
                <br />
                <div class="alert alert-danger" role="alert">
                    @m_configError
                </div>
                <br />
            }
            <EditForm Model="m_config" OnSubmit="SaveConfig">
                <div class="form-group">
                    <label for="organization name"><b>Configuration Name</b></label>
                    <InputText id="configName" @bind-Value="m_config.Name" class="form-control" required
                        placeholder="Configuration name" />
                </div>
                <div class="form-group">
                    <label for="organization name"><b>Protocol</b></label>
                    <InputSelect id="configProtocol" @bind-Value="m_config.Protocol" class="form-control" required>
                        @foreach (var value in Enum.GetValues(typeof(Protocol)))
                        {
                            <option>@value</option>
                        }
                    </InputSelect>
                </div>
                <div class="text-center">
                    <button class="btn btn-success" type="submit">Save Configuration</button>
                </div>
            </EditForm>
            <br />
            <h6 class="text-center">Coil Registers</h6>
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th style="width: 70%;" scope="col">Register Address</th>
                        <th scope="col" style="color: red;width: 30%;">Remove</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var line in m_config.Registers.CoilRegisters.OrderBy(x => x.RegisterAddress))
                    {
                        <tr>
                            <td>Register Address: @line.RegisterAddress</td>
                            <td>
                                <button class="btn btn-link text-danger"
                                @onclick="() => RemoveFromConfig(line,RegisterType.CoilRegister)">
                                    🗙
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <h6 class="text-center">Discrete Inputs</h6>
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th style="width: 70%;" scope="col">Register Address</th>
                        <th scope="col" style="color: red;width: 30%;">Remove</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var line in m_config.Registers.DiscreteInputs.OrderBy(x => x.RegisterAddress))
                    {
                        <tr>
                            <td>Register Address: @line.RegisterAddress</td>
                            <td>
                                <button class="btn btn-link text-danger"
                                @onclick="() => RemoveFromConfig(line,RegisterType.DiscreteInput)">
                                    🗙
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <h6 class="text-center">Input Registers</h6>
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th style="width: 70%;" scope="col">Register Address</th>
                        <th scope="col" style="color: red;width: 30%;">Remove</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var line in m_config.Registers.InputRegisters.OrderBy(x => x.RegisterAddress))
                    {
                        <tr>
                            <td>Register Address: @line.RegisterAddress</td>
                            <td>
                                <button class="btn btn-link text-danger"
                                @onclick="() => RemoveFromConfig(line,RegisterType.InputRegister)">
                                    🗙
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <h6 class="text-center">Holding Registers</h6>
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th style="width: 70%;" scope="col">Register Address</th>
                        <th scope="col" style="color: red;width: 30%;">Remove</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var line in m_config.Registers.HoldingRegisters.OrderBy(x => x.RegisterAddress))
                    {
                        <tr>
                            <td>Register Address: @line.RegisterAddress</td>
                            <td>
                                <button class="btn btn-link text-danger"
                                @onclick="() => RemoveFromConfig(line,RegisterType.HoldingRegister)">
                                    🗙
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (m_isEdit)
        {
            <div class="text-center" style="margin:20px">
                <button class="btn btn-danger" @onclick="() => DeleteConfig()">❗ 🗙 Delete configuration ❗</button>
            </div>

        }
    </Authorized>
    <NotAuthorized>
        <h1>Sorry</h1>
        <p>You're not authorized to reach this page.</p>
        <p>You may need to log in as a different user.</p>
    </NotAuthorized>
    <Authorizing>
        <h1>Authorization in progress!</h1>
    </Authorizing>
</AuthorizeView>
@code {
    [Parameter]
    public int OrganizationId { get; set; }

    public ConfigValueModel m_valueModel = new ConfigValueModel();
    private ClientConfig m_config = new ClientConfig();
    private ClientConfigEntity m_configEntity;
    private string m_configError = "";
    private string m_registerError = "";
    private int m_configId;
    private bool m_isEdit = false;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(NavManager.Uri).Query);
        if (query.TryGetValue("configurationId", out StringValues configurationId))
        {
            m_configId = int.Parse(configurationId[0]);
            m_configEntity = organizationContext
            .Configurations
            .Where(x => x.ID == m_configId)
            .FirstOrDefault();

            m_config = configHandler.JsonToConfig(m_configEntity.ConfigJson);
            m_isEdit = true;
        }
    }

    private void AddToConfig()
    {
        configHandler.TryAddRegister(ref m_config, m_valueModel.Type, m_valueModel.RegisterNumber, out m_registerError);
    }

    private void RemoveFromConfig(Register register, RegisterType type)
    {
        configHandler.TryRemoveRegister(ref m_config, type, register.RegisterAddress);
    }

    private void SaveConfig()
    {
        if (m_isEdit)
        {
            string json = configHandler.ConfigToJson(m_config);
            m_configEntity.ConfigJson = json;
            organizationContext.Configurations.Update(m_configEntity);
            organizationContext.SaveChanges();
            NavManager.NavigateTo(NavManager.Uri, true);
        }
        else
        {
            string json = configHandler.ConfigToJson(m_config);
            var entry = organizationContext.Configurations.Add(new ClientConfigEntity
            {
                OrganizationId = OrganizationId,
                ConfigName = m_config.Name,
                ConfigJson = json
            });
            organizationContext.SaveChanges();
            NavManager.NavigateTo("/configurations/edit/" + OrganizationId + "?configurationId=" + entry.Entity.ID, true);
        }
    }

    private void DeleteConfig()
    {
        var config = organizationContext.Configurations
        .Where(x => x.ID == m_configId)
        .FirstOrDefault();
        int id = config.OrganizationId;
        organizationContext.Configurations.Remove(config);
        organizationContext.SaveChanges();
        NavManager.NavigateTo("/organizations/" + id, true);
    }
}

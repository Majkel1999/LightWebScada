@page "/login/{error:int?}"
@using FrontEnd.Access.Authentication
@using FrontEnd.DataModels
@using FrontEnd.Access
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<div class="container" style="max-width:500px">

    <div class="text-center font-weight-bolder" style="font-size:32px">Panel logowania</div>
    <div class="border" style="padding:20px">
        @if (Error != 0)
        {
            <div class="alert alert-danger" role="alert">
                Placeholder error message!
            </div>
        }
        <EditForm Model="@userLogin" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="username"><b>Nazwa użytkownika</b></label>
                <InputText id="username" @bind-Value="userLogin.Username" class="form-control" required
                           placeholder="Nazwa użytkownika..." />
            </div>
            <div class="form-group">
                <label for="email"><b>Hasło</b></label>
                <InputText type="password" id="pw" @bind-Value="userLogin.Password" class="form-control" required
                           placeholder="Hasło..." />
            </div>


            <button class="btn btn-success" type="submit">Zaloguj</button>
            <a class="btn btn-danger" type="button" href="/">Anuluj</a>

            <br />
            <a href="/register">Nie posiadasz konta? Zarejestruj się!</a>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int Error { get; set; }
    public UserLogin userLogin { get; set; } = new UserLogin();

    private async void Submit()
    {
        UserStore userStore = new UserStore();
        if (await userStore.CheckUserExistsAsync(userLogin.Username))
            NavManager.NavigateTo("/login/1");

        if (!UserCredentialHelper.CheckUserPassword(userLogin.Username, userLogin.Password))
            NavManager.NavigateTo("/login/1");
        else
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = state.User;
            user.AddIdentity(new ClaimsIdentity("Basic", userLogin.Username, "User"));
            NavManager.NavigateTo("/");
        }
    }
}
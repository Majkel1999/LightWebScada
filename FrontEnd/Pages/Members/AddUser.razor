@page "/organizations/users/add/{organizationId:int}"

@using System.Text.RegularExpressions

@inject OrganizationContext organizationContext
@inject NavigationManager navManager
@inject UserManager<FrontEndUser> userManager

@attribute [Authorize]

<div class="container" style="max-width:500px">
    <div class="border" style="padding: 20px; margin: 10px">
        @if (!String.IsNullOrEmpty(m_registerError))
        {
            <br />
            <div class="alert alert-danger" role="alert">
                @m_registerError
            </div>
            <br />
        }
        <EditForm Model="m_memberModel" OnValidSubmit="TryAddUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <InputText @bind-Value="m_memberModel.Email" class="form-control" required
                    placeholder="Email address" />

                <label>Grant administrator privileges</label>
                <InputCheckbox @bind-Value="m_memberModel.Admin" class="form-control" />

                <h3>Permissions</h3>
                <label>Show views</label>
                <InputCheckbox @bind-Value="m_memberModel.CanShowViews" class="form-control" />

                <label>Add/Edit views</label>
                <InputCheckbox @bind-Value="m_memberModel.CanEditViews" class="form-control" />

                <label>Delete views</label>
                <InputCheckbox @bind-Value="m_memberModel.CanDeleteViews" class="form-control" />

                <label>Add/Edit configurations</label>
                <InputCheckbox @bind-Value="m_memberModel.CanEditConfigurations" class="form-control" />

                <label>Delete configurations</label>
                <InputCheckbox @bind-Value="m_memberModel.CanDeleteConfigurations" class="form-control" />

                <button class="btn btn-primary" type="submit">Add</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int organizationId { get; set; }

    private string m_registerError;
    private MemberModel m_memberModel = new MemberModel();

    private async void TryAddUser()
    {
        m_registerError = "";
        try
        {
            if (!Regex.IsMatch(m_memberModel.Email,
            @"^[^@\s]+@[^@\s]+\.[^@\s]+$",
            RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))
            {
                m_registerError = "The specified e-mail is in incorrect format";
                return;
            }
        }
        catch (RegexMatchTimeoutException)
        {
            m_registerError = "The specified e-mail is in incorrect format";
            return;
        }

        if (await userManager.FindByEmailAsync(userManager.NormalizeEmail(m_memberModel.Email)) == null)
        {
            m_registerError = "Specified user doesn't exist!";
            return;
        }

        organizationContext.Members.Add(new OrganizationMember
        {
            UserName = m_memberModel.Email.Normalize(),
            isAdmin = m_memberModel.Admin,
            OrganizationId = organizationId
        });
        organizationContext.SaveChanges();
        navManager.NavigateTo("/organizations/" + organizationId, true);
    }
}
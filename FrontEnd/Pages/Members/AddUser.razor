@page "/organizations/users/add/{organizationId:int}"

@using System.Text.RegularExpressions
@using Microsoft.Extensions.Primitives

@inject OrganizationContext organizationContext
@inject NavigationManager navManager
@inject UserManager<FrontEndUser> userManager

<AuthorizeView Context="authContext" Policy=@Policies.AdminPolicy Resource="@organizationId">
<Authorized>
<div class="container" style="max-width:500px">
    <div class="border" style="padding: 20px; margin: 10px">
        @if (!String.IsNullOrEmpty(m_registerError))
        {
            <br />
            <div class="alert alert-danger" role="alert">
                @m_registerError
            </div>
            <br />
        }
        <EditForm Model="m_memberModel" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                @if (m_isEdit)
                {
                    <InputText @bind-Value="m_memberModel.Email" class="form-control" required placeholder="Email address"
                    disabled />
                }
                else
                {
                    <InputText @bind-Value="m_memberModel.Email" class="form-control" required
                    placeholder="Email address" />
                }

                <label>Grant administrator privileges</label>
                <InputCheckbox @bind-Value="m_memberModel.Admin" class="form-control" />

                <h3>Permissions</h3>
                @if (!m_memberModel.Admin)
                {
                    <label>Show views</label>
                    <InputCheckbox @bind-Value="m_memberModel.CanShowViews" class="form-control" />

                    <label>Add/Edit views</label>
                    <InputCheckbox @bind-Value="m_memberModel.CanEditViews" class="form-control" />

                    <label>Add/Edit configurations</label>
                    <InputCheckbox @bind-Value="m_memberModel.CanEditConfigurations" class="form-control" />

                    <label>Create Reports</label>
                    <InputCheckbox @bind-Value="m_memberModel.CanCreateReports" class="form-control" />
                }
                else
                {
                    <label>Show views</label>
                    <InputCheckbox @bind-Value="m_memberModel.CanShowViews" class="form-control" disabled />

                    <label>Add/Edit views</label>
                    <InputCheckbox @bind-Value="m_memberModel.CanEditViews" class="form-control" disabled />

                    <label>Add/Edit configurations</label>
                    <InputCheckbox @bind-Value="m_memberModel.CanEditConfigurations" class="form-control" disabled />

                    <label>Create Reports</label>
                    <InputCheckbox @bind-Value="m_memberModel.CanCreateReports" class="form-control" disabled />
                }

                <button class="btn btn-primary center" type="submit">Apply</button>
            </div>
        </EditForm>
        @if (m_isEdit)
        {
            <button class="btn btn-danger center" @onclick="RemoveUser">Remove User</button>
        }
    </div>
</div>
</Authorized>
    <NotAuthorized>
        <h1>Sorry</h1>
        <p>You're not authorized to reach this page.</p>
        <p>You may need to log in as a different user.</p>
    </NotAuthorized>
    <Authorizing>
        <h1>Authorization in progress!</h1>
    </Authorizing>
</AuthorizeView>

@code {
    [Parameter]
    public int organizationId { get; set; }

    private string m_registerError;
    private MemberModel m_memberModel = new MemberModel();
    private bool m_isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(navManager.Uri).Query);
        if (query.TryGetValue("User", out StringValues userEmail))
        {
            if (!organizationContext.Members.Where(x => x.OrganizationId == organizationId).Any(x => x.UserName == userEmail[0]))
                navManager.NavigateTo("/organizations/" + organizationId, true);
            m_memberModel.Email = userEmail[0];

            if (organizationContext.Members.Where(x => x.OrganizationId == organizationId).Any(x => x.UserName == userEmail[0] &&
            x.isAdmin == true))
                m_memberModel.Admin = true;

            FrontEndUser user = await userManager.FindByEmailAsync(userManager.NormalizeEmail(userEmail[0]));
            if (user == null)
                navManager.NavigateTo("/organizations/" + organizationId, true);

            IEnumerable<Claim> claims = (await userManager.GetClaimsAsync(user)).Where(x => x.Value == organizationId.ToString());

            if (claims.Any(x => x.Type == OrganizationClaims.ShowViewClaim))
                m_memberModel.CanShowViews = true;
            if (claims.Any(x => x.Type == OrganizationClaims.EditViewClaim))
                m_memberModel.CanEditViews = true;
            if (claims.Any(x => x.Type == OrganizationClaims.EditConfigurationsClaim))
                m_memberModel.CanEditConfigurations = true;
            if (claims.Any(x => x.Type == OrganizationClaims.CreateReportsClaim))
                m_memberModel.CanCreateReports = true;
            m_isEdit = true;
        }
    }

    private async void Submit()
    {
        if (m_isEdit)
            await ModifyUser();
        else
            await TryAddUser();
    }

    private async Task ModifyUser()
    {
        FrontEndUser user = await userManager.FindByEmailAsync(userManager.NormalizeEmail(m_memberModel.Email));
        IEnumerable<Claim> claims = (await userManager.GetClaimsAsync(user)).Where(x => x.Value == organizationId.ToString());
        await CheckClaim(user, claims, OrganizationClaims.ShowViewClaim, m_memberModel.CanShowViews);
        await CheckClaim(user, claims, OrganizationClaims.EditViewClaim, m_memberModel.CanEditViews);
        await CheckClaim(user, claims, OrganizationClaims.EditConfigurationsClaim, m_memberModel.CanEditConfigurations);
        await CheckClaim(user, claims, OrganizationClaims.CreateReportsClaim, m_memberModel.CanCreateReports);
        navManager.NavigateTo("/organizations/" + organizationId, true);
    }

    private async Task CheckClaim(FrontEndUser user, IEnumerable<Claim> claims, string type, bool shouldBeSet)
    {
        if (shouldBeSet && !claims.Any(x => x.Type == type))
            await userManager.AddClaimAsync(user, new Claim(type, organizationId.ToString()));
        else if (!shouldBeSet && claims.Any(x => x.Type == type))
            await userManager.RemoveClaimAsync(user, claims.Where(x => x.Type == type).FirstOrDefault());
    }

    private async Task TryAddUser()
    {
        m_registerError = "";
        try
        {
            if (!Regex.IsMatch(m_memberModel.Email,
            @"^[^@\s]+@[^@\s]+\.[^@\s]+$",
            RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))
            {
                m_registerError = "The specified e-mail is in incorrect format";
                return;
            }
        }
        catch (RegexMatchTimeoutException)
        {
            m_registerError = "The specified e-mail is in incorrect format";
            return;
        }

        FrontEndUser user = await userManager.FindByEmailAsync(userManager.NormalizeEmail(m_memberModel.Email));

        if (user == null)
        {
            m_registerError = "Specified user doesn't exist!";
            return;
        }

        if (organizationContext.Members.Where(x => x.OrganizationId == organizationId).Any(x => x.UserName ==
        m_memberModel.Email.Normalize()))
        {
            m_registerError = "User is already in organization!";
            return;
        }

        organizationContext.Members.Add(new OrganizationMember
        {
            UserName = m_memberModel.Email.Normalize(),
            isAdmin = m_memberModel.Admin,
            OrganizationId = organizationId
        });
        organizationContext.SaveChanges();

        List<Claim> claims = new List<Claim>();

        if (m_memberModel.CanShowViews)
            claims.Add(new Claim(OrganizationClaims.ShowViewClaim, organizationId.ToString()));
        if (m_memberModel.CanEditViews)
            claims.Add(new Claim(OrganizationClaims.EditViewClaim, organizationId.ToString()));
        if (m_memberModel.CanEditConfigurations)
            claims.Add(new Claim(OrganizationClaims.EditConfigurationsClaim, organizationId.ToString()));
        if (m_memberModel.CanCreateReports)
            claims.Add(new Claim(OrganizationClaims.CreateReportsClaim, organizationId.ToString()));

        await userManager.AddClaimsAsync(user, claims);
        navManager.NavigateTo("/organizations/" + organizationId, true);
    }

    private async void RemoveUser()
    {
        FrontEndUser user = await userManager.FindByEmailAsync(userManager.NormalizeEmail(m_memberModel.Email));
        IEnumerable<Claim> claims = (await userManager.GetClaimsAsync(user)).Where(x => x.Value == organizationId.ToString());
        await CheckClaim(user, claims, OrganizationClaims.ShowViewClaim, false);
        await CheckClaim(user, claims, OrganizationClaims.EditViewClaim, false);
        await CheckClaim(user, claims, OrganizationClaims.EditConfigurationsClaim, false);
        await CheckClaim(user, claims, OrganizationClaims.CreateReportsClaim, false);
        OrganizationMember member = organizationContext.Members
        .Where(x => x.OrganizationId == organizationId && x.UserName == user.Email.Normalize())
        .FirstOrDefault();
        if (member != null)
        {
            organizationContext.Members.Remove(member);
            organizationContext.SaveChanges();
        }
        navManager.NavigateTo("/organizations/" + organizationId, true);
    }
}